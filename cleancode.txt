Summary Clean Code : Code that strives for simplicity

-----------------
Chapter 2 : NAMES
-----------------
	- Intention-revealing names => easier to understand code (clarity). If a name requires a comment, then the name does not reveal its intent.
	- Avoid Disinformation => avoid names which can be specific in a langage
	- Make Meaningful Distinctions => don't code for the compiler
	- Pronounceable names => facilitate intelligent conversation 
	- Searchable => The length of a name should correspond to the size of its scope
	- Avoid Mental Mapping => clarity is king, write code that others can understand
	- Pick One Word per Concept => be consistent
	- Use Problem Domain Names => he code that has more to do with problem domain concepts should have names drawn from the problem domain (can ask a domain expert what it means)
	- Add Meaningful Context (readers will understand that these variables are part of a larger structure)
	- Classe : noun (should not be a verb)
	- Method : begin with verb (Accessors, mutators, and predicates should be named for their value and prefixed with get, set, and is)

---------------------
Chapter 3 : FUNCTIONS
---------------------
	- A method should contains less than 30 lines of code
	- The indent level of a function should not be greater than one or two
	- Do one thing, Do it well, They should do it only
	- One Level of Abstraction per Function (we need to make sure that the statements within our function are all at the same level of abstraction)
	- Reading Code from Top to Bottom: The Stepdown Rule
	- Use Descriptive Names => don't be scared to use long names
	- Reduce the number of arguments
	- Indicate the presence of side effects in its name
	- Flag Arguments (boolean argument) ugly to avoid because it screams a function that does more than one thing
	- Argument Objects => when a function seems to need more than two or three arguments, it is likely that some of those arguments ought to be wrapped into a class of their own.
	- Argument Lists => If the variable arguments are all treated identically, as they are in the example above, then they are equivalent to a single argument of type List
	- Have No Side Effects => our function promises to do one thing, but it also does other hidden things.
	- Output Arguments => In general output arguments should be avoided. If your function must change the state of something, have it change the state of its owning object.
	- Command Query Separation => Functions should either do something or answer something
	- Extract Try/Catch Blocks => So it is better to extract the bodies of the try and catch blocks out into functions of their own
	 - Error Handling Is One Thing => a function that handles errors should do nothing else
	- Don't repeat yourself

If you follow the rules herein, your functions will be short, well named, and nicely organized


---------------------
Chapter 4 : COMMENTS
---------------------
	- Comments Do Not Make Up for Bad Code : Clear and expressive code with few comments is far superior to cluttered and complex code with lots of comments
	- Explain Yourself in Code

	- GOOD COMMENTS : 
		legals comments, 
		informative comments, 
		explanation of intent,
		clarification => Sometimes it is just helpful to translate the meaning of some obscure argument or return value into something that’s readable
	- Warning of consequences
	- Amplification => A comment may be used to amplify the importance of something that may otherwise seem inconsequential.

	- BAD COMMENTS :
		Redundant Comments : don't just describe a simple function
		Misleading Comments : Sometimes, with all the best intentions, a programmer makes a statement in his comments that isn’t precise enough to be accurate
		Mandated Comments : It is just plain silly to have a rule that says that every function must have a javadoc
		Journal Comments : Sometimes people add a comment to the start of a module every time they edit it
		Don’t Use a Comment When You Can Use a Function or a Variable
		Non local Information


--------------------------
Chapter 7 : ERROR HANDLING
--------------------------
	- Write Your Try-Catch-Finally Statement First
	- Use Unchecked Exceptions
	- Provide Context with Exceptions
	- Define Exception Classes in Terms of a Caller’s Needs => when we define exception classes in an appli- cation, our most important concern should be how they are caught
	- Don’t Return Null => If you are tempted to return null from a method, consider throwing an exception or returning a SPECIAL CASE object instead

Clean code is readable, but it must also be robust. These are not conflicting goals. We can write robust clean code if we see error handling as a separate concern, something that is viewable independently of our main logic. To the degree that we are able to do that, we can reason about it independently, and we can make great strides in the maintainability of our code.






