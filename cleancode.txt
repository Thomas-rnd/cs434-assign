Summary Clean Code : Code that strives for simplicity

-----------------
Chapter 2 : NAMES
-----------------
	- Intention-revealing names => easier to understand code (clarity). If a name requires a comment, then the name does not reveal its intent.
	- Avoid Disinformation => avoid names which can be specific in a langage
	- Make Meaningful Distinctions => don't code for the compiler
	- Pronounceable names => facilitate intelligent conversation 
	- Searchable => The length of a name should correspond to the size of its scope
	- Avoid Mental Mapping => clarity is king, write code that others can understand
	- Pick One Word per Concept => be consistent
	- Use Problem Domain Names => he code that has more to do with problem domain concepts should have names drawn from the problem domain (can ask a domain expert what it means)
	- Add Meaningful Context (readers will understand that these variables are part of a larger structure)
	- Classe : noun (should not be a verb)
	- Method : begin with verb (Accessors, mutators, and predicates should be named for their value and prefixed with get, set, and is)

---------------------
Chapter 3 : FUNCTIONS
---------------------
	- A method should contains less than 30 lines of code
	- The indent level of a function should not be greater than one or two
	- Do one thing, Do it well, They should do it only
	- One Level of Abstraction per Function (we need to make sure that the statements within our function are all at the same level of abstraction)
	- Reading Code from Top to Bottom: The Stepdown Rule
	- Use Descriptive Names => don't be scared to use long names
	- Reduce the number of arguments
	- Indicate the presence of side effects in its name
	- Flag Arguments (boolean argument) ugly to avoid because it screams a function that does more than one thing
	- Argument Objects => when a function seems to need more than two or three arguments, it is likely that some of those arguments ought to be wrapped into a class of their own.
	- Argument Lists => If the variable arguments are all treated identically, as they are in the example above, then they are equivalent to a single argument of type List
	- Have No Side Effects => our function promises to do one thing, but it also does other hidden things.
	- Output Arguments => In general output arguments should be avoided. If your function must change the state of something, have it change the state of its owning object.
	- Command Query Separation => Functions should either do something or answer something
	- Extract Try/Catch Blocks => So it is better to extract the bodies of the try and catch blocks out into functions of their own
	 - Error Handling Is One Thing => a function that handles errors should do nothing else
	- Don't repeat yourself

If you follow the rules herein, your functions will be short, well named, and nicely organized


---------------------
Chapter 4 : COMMENTS
---------------------
	- Comments Do Not Make Up for Bad Code : Clear and expressive code with few comments is far superior to cluttered and complex code with lots of comments
	- Explain Yourself in Code => function, variable

	- GOOD COMMENTS : 
		explain why ??
		legals comments, 
		informative comments, 
		explanation of intent,
		clarification => Sometimes it is just helpful to translate the meaning of some obscure argument or return value into something that’s readable
	- Warning of consequences
	- Amplification => A comment may be used to amplify the importance of something that may otherwise seem inconsequential.

	- BAD COMMENTS :
		Redundant Comments : don't just describe a simple function
		Misleading Comments : Sometimes, with all the best intentions, a programmer makes a statement in his comments that isn’t precise enough to be accurate
		Mandated Comments : It is just plain silly to have a rule that says that every function must have a javadoc
		Journal Comments : Sometimes people add a comment to the start of a module every time they edit it
		Don’t Use a Comment When You Can Use a Function or a Variable
		Non local Information

Write lot of assertion => find the code invariant

--------------------------
Chapter 7 : ERROR HANDLING
--------------------------
	- Write Your Try-Catch-Finally Statement First
	- Use Unchecked Exceptions
	- Provide Context with Exceptions
	- Define Exception Classes in Terms of a Caller’s Needs => when we define exception classes in an appli- cation, our most important concern should be how they are caught
	- Don’t Return Null => If you are tempted to return null from a method, consider throwing an exception or returning a SPECIAL CASE object instead

Clean code is readable, but it must also be robust. These are not conflicting goals. We can write robust clean code if we see error handling as a separate concern, something that is viewable independently of our main logic. To the degree that we are able to do that, we can reason about it independently, and we can make great strides in the maintainability of our code.

---------------------
Chapter 9 : UNIT TEST
---------------------
The Agile and TDD move- ments have encouraged many programmers to write automated unit tests, and more are joining their ranks every day. But in the mad rush to add testing to our discipline, many programmers have missed some of the more subtle, and important, points of writing good tests.

	- The Three Laws of TDD
		- First Law You may not write production code until you have written a failing unit 		  test
		- Second Law You may not write more of a unit test than is sufficient to fail, and 		  not compiling is failing.
		- Third Law You may not write more production code than is sufficient to pass the 		  currently failing test.
	 The tests and the production code are written together, with the tests just a few seconds ahead of the production code.
	- Keeping Tests Clean => The moral of the story is simple: Test code is just as important as production code. It is not a second-class citizen. It requires thought, design, and care. It must be kept as clean as production code.
	- Tests Enable the -ilities => You can improve that architecture and design without fear! Tests enable all the -ilities, because tests enable change.
	- Clean Tests => Anyone who reads these tests should be able to work out what they do very quickly, without being misled or overwhelmed by details.
	 - A Dual Standard => There are things that you might never do in a production environment that are perfectly fine in a test environment. Usually they involve issues of memory or CPU efficiency. But they never involve issues of cleanliness.
	- One Assert per Test => best thing we can say is that the number of asserts in a test ought to be minimized
	- Single Concept per Test => So probably the best rule is that you should minimize the number of asserts per concept and test just one concept per test function.
	- F.I.R.S.T
		- Fast Tests should be fast. They should run quickly. When tests run slow, you won’t 		  want to run them frequently. If you don’t run them frequently, you won’t find 		  problems early enough to fix them easily. You won’t feel as free to clean up the 		  code. Eventually the code will begin to rot.
		- Independent Tests should not depend on each other. One test should not set up the 		  conditions for the next test. You should be able to run each test independently 		  and run the tests in any order you like. When tests depend on each other, then the 		  first one to fail causes a cascade of downstream failures, making diagnosis 		  difficult and hiding downstream defects.
		- Repeatable Tests should be repeatable in any environment. You should be able to run 		  the tests in the production environment, in the QA environment, and on your laptop 		  while riding home on the train without a network. If your tests aren’t repeatable 		  in any environ- ment, then you’ll always have an excuse for why they fail. You’ll 	 	  also find yourself unable to run the tests when the environment isn’t available.
		- Self-Validating The tests should have a boolean output. Either they pass or fail. 		  You should not have to read through a log file to tell whether the tests pass. You 		  should not have to manually compare two different text files to see whether the 		  tests pass. If the tests aren’t self-validating, then failure can become subjective 		  and running the tests can require a long manual evaluation.
		- Timely The tests need to be written in a timely fashion. Unit tests should be 		  written just before the production code that makes them pass. If you write tests 	  	  after the production code, then you may find the production code to be hard to 		  test. You may decide that some production code is too hard to test. You may not 		  design the production code to be testable.

If you let the tests rot, then your code will rot too. Keep your tests clean.

---------------------
Chapter 10 : CLASSES
---------------------
	- Class Organization => Following the standard Java convention, a class should begin with a list of variables. Pub- lic static constants, if any, should come first. Then private static variables, followed by private instance variables. There is seldom a good reason to have a public variable.
Public functions should follow the list of variables. We like to put the private utilities called by a public function right after the public function itself. This follows the stepdown rule and helps the program read like a newspaper article.
	- Encapsulation => we’ll first look for a way to maintain privacy. Loosening encapsulation is always a last resort. But we sometimes need to make a variable or utility function protected so that it can be accessed by a test
	- Classes Should Be Small => The name of a class should describe what responsibilities it fulfills. We should also be able to write a brief description of the class in about 25 words
	- The Single Responsibility Principle => We want our systems to be composed of many small classes, not a few large ones. Each small class encapsulates a single responsibility, has a single reason to change, and collaborates with a few others to achieve the desired system behaviors.
	- Organizing for Change => We want to structure our systems so that we muck with as little as possible when we update them with new or changed features. In an ideal system, we incorporate new features by extending the system, not by making modifications to existing code.
	- Isolating from Change => By minimizing coupling in this way, our classes adhere to another class design principle known as the Dependency Inversion Principle (DIP).5 In essence, the DIP says that our classes should depend upon abstractions, not on concrete details.	























